import matplotlib.pyplot as plt
import networkx as nx
import numpy as np
from collections import deque
import time

# Configurar matplotlib para modo interativo
plt.ion()

class BFSVisualization:
    def __init__(self):
        # Definindo um grafo de exemplo simples
        # Formato: {v√©rtice: [vizinhos]}
        self.graph = {
            'A': ['B', 'C'],
            'B': ['A', 'D', 'E'],
            'C': ['A', 'F'],
            'D': ['B'],
            'E': ['B', 'F'],
            'F': ['C', 'E']
        }
        
        # V√©rtices do grafo
        self.vertices = list(self.graph.keys())
        
        # Para visualiza√ß√£o do algoritmo
        self.visited = set()
        self.queue = deque()
        self.current_vertex = None
        self.path = []
        self.fig = None
        self.pos = None
        
        # Para constru√ß√£o da √°rvore BFS
        self.tree_edges = []  # Arestas que formam a √°rvore BFS
        self.parent = {}      # Dicion√°rio pai->filho para construir a √°rvore
        self.levels = {}      # N√≠vel de cada v√©rtice na √°rvore
        
    def show_initial_graph(self):
        """Mostra o grafo inicial antes de come√ßar o algoritmo"""
        self.fig, (self.ax1, self.ax2, self.ax3) = plt.subplots(1, 3, figsize=(20, 8))
        
        # Cria o grafo NetworkX
        G = nx.Graph()
        for vertex, neighbors in self.graph.items():
            for neighbor in neighbors:
                G.add_edge(vertex, neighbor)
        
        # Posicionamento fixo dos v√©rtices para toda a anima√ß√£o
        self.pos = nx.spring_layout(G, seed=42)
        
        # Subplot 1: Grafo original
        nx.draw_networkx_edges(G, self.pos, edge_color='blue', width=2, alpha=0.7, ax=self.ax1)
        nx.draw_networkx_nodes(G, self.pos, node_color='lightblue', 
                              node_size=1500, alpha=0.9, ax=self.ax1)
        nx.draw_networkx_labels(G, self.pos, font_size=16, font_weight='bold', ax=self.ax1)
        
        self.ax1.set_title("GRAFO ORIGINAL", fontsize=14, fontweight='bold', color='blue')
        self.ax1.axis('off')
        
        # Subplot 2: Estado atual do BFS
        self.ax2.set_title("EXPLORA√á√ÉO BFS", fontsize=14, fontweight='bold')
        self.ax2.axis('off')
        
        # Subplot 3: √Årvore BFS
        self.ax3.set_title("√ÅRVORE BFS", fontsize=14, fontweight='bold', color='green')
        self.ax3.axis('off')
        
        # Informa√ß√µes iniciais no subplot 2
        info_text = []
        info_text.append("üìä ALGORITMO BFS")
        info_text.append("=" * 20)
        info_text.append("")
        info_text.append("üîó ADJAC√äNCIAS:")
        for vertex, neighbors in self.graph.items():
            neighbors_str = ", ".join(neighbors)
            info_text.append(f"   {vertex}: {neighbors_str}")
        
        info_text.append("")
        info_text.append("ÔøΩ CONSTRUINDO √ÅRVORE:")
        info_text.append("   ‚Ä¢ Cada v√©rtice visitado")
        info_text.append("     vira um n√≥ da √°rvore")
        info_text.append("   ‚Ä¢ Arestas de descoberta")
        info_text.append("     formam a estrutura")
        
        text_content = "\n".join(info_text)
        self.ax2.text(0.05, 0.95, text_content, transform=self.ax2.transAxes, fontsize=11,
                     verticalalignment='top', fontfamily='monospace',
                     bbox=dict(boxstyle='round,pad=0.5', facecolor='lightcyan', alpha=0.8))
        
        plt.tight_layout()
        plt.draw()
        plt.pause(3)  # Mostra por 3 segundos
    
    def bfs_algorithm(self, start_vertex='A'):
        """Algoritmo BFS com visualiza√ß√£o passo a passo"""
        print("üåü ALGORITMO BFS - BUSCA EM LARGURA")
        print("=" * 45)
        print("üìä Mostrando grafo inicial...")
        self.show_initial_graph()
        
        print("üìä Grafo original:")
        for vertex, neighbors in self.graph.items():
            neighbors_str = ", ".join(neighbors)
            print(f"   {vertex}: {neighbors_str}")
        
        print(f"\nüöÄ Iniciando BFS do v√©rtice: {start_vertex}")
        print("üîÑ Executando algoritmo passo a passo:")
        print("-" * 45)
        
        # Inicializa√ß√£o
        self.visited = set()
        self.queue = deque([start_vertex])
        self.path = []
        self.tree_edges = []
        self.parent = {}
        self.levels = {start_vertex: 0}
        step = 0
        
        # Primeiro passo: adiciona o v√©rtice inicial
        print(f"\nPasso {step}: Iniciando com v√©rtice {start_vertex}")
        print(f"   üì• Fila: {list(self.queue)}")
        print(f"   ‚úÖ Visitados: {sorted(self.visited)}")
        
        self.current_vertex = start_vertex
        self.visualize_step(f"Iniciando com v√©rtice {start_vertex}", step)
        time.sleep(2)
        
        step += 1
        
        while self.queue:
            # Remove o primeiro v√©rtice da fila
            current = self.queue.popleft()
            
            print(f"\nPasso {step}: Processando v√©rtice {current}")
            
            if current not in self.visited:
                # Marca como visitado
                self.visited.add(current)
                self.path.append(current)
                
                print(f"   üéØ V√©rtice {current} visitado!")
                print(f"   üìã Caminho atual: {' ‚Üí '.join(self.path)}")
                
                # Adiciona todos os vizinhos n√£o visitados √† fila
                neighbors_added = []
                for neighbor in self.graph[current]:
                    if neighbor not in self.visited and neighbor not in self.queue:
                        self.queue.append(neighbor)
                        neighbors_added.append(neighbor)
                        
                        # Constr√≥i a √°rvore BFS
                        self.parent[neighbor] = current
                        self.tree_edges.append((current, neighbor))
                        self.levels[neighbor] = self.levels[current] + 1
                
                if neighbors_added:
                    neighbors_str = ", ".join(neighbors_added)
                    print(f"   ‚ûï Adicionados √† fila: {neighbors_str}")
                
                print(f"   üì• Fila atual: {list(self.queue)}")
                print(f"   ‚úÖ Visitados: {sorted(self.visited)}")
                
                # Atualiza visualiza√ß√£o
                self.current_vertex = current
                self.visualize_step(f"Processando v√©rtice {current}", step)
                
                step += 1
                time.sleep(2)
            else:
                print(f"   ‚ö†Ô∏è  V√©rtice {current} j√° foi visitado")
        
        print(f"\nüéâ BFS CONCLU√çDO!")
        print(f"üìã Ordem de visita√ß√£o: {' ‚Üí '.join(self.path)}")
        print(f"‚úÖ Total de v√©rtices visitados: {len(self.visited)}")
        
        return self.path
    
    def visualize_step(self, title, step):
        """Visualiza o estado atual do algoritmo BFS com √°rvore"""
        # Limpa os subplots
        self.ax1.clear()
        self.ax2.clear()
        self.ax3.clear()
        
        # Cria o grafo NetworkX
        G = nx.Graph()
        for vertex, neighbors in self.graph.items():
            for neighbor in neighbors:
                G.add_edge(vertex, neighbor)
        
        # SUBPLOT 1: Grafo original com estado atual
        # Desenha todas as arestas em cinza claro
        nx.draw_networkx_edges(G, self.pos, edge_color='lightgray', width=1, alpha=0.5, ax=self.ax1)
        
        # Desenha arestas da √°rvore BFS em verde
        if self.tree_edges:
            tree_graph = nx.Graph()
            tree_graph.add_edges_from(self.tree_edges)
            nx.draw_networkx_edges(tree_graph, self.pos, edge_color='green', 
                                 width=3, ax=self.ax1)
        
        # Define cores dos v√©rtices
        node_colors = []
        for vertex in self.vertices:
            if vertex == self.current_vertex:
                node_colors.append('red')  # V√©rtice sendo processado
            elif vertex in self.visited:
                node_colors.append('lightgreen')  # V√©rtices visitados
            elif vertex in self.queue:
                node_colors.append('orange')  # V√©rtices na fila
            else:
                node_colors.append('lightgray')  # V√©rtices n√£o visitados
        
        # Desenha os v√©rtices
        nx.draw_networkx_nodes(G, self.pos, node_color=node_colors, 
                              node_size=1200, alpha=0.9, ax=self.ax1)
        
        # Adiciona labels dos v√©rtices
        nx.draw_networkx_labels(G, self.pos, font_size=14, font_weight='bold', ax=self.ax1)
        
        self.ax1.set_title(f"EXPLORA√á√ÉO BFS - {title}", fontsize=12, fontweight='bold')
        self.ax1.axis('off')
        
        # SUBPLOT 2: Informa√ß√µes do algoritmo
        self.ax2.axis('off')
        
        info_text = []
        info_text.append("ESTADO ATUAL DO BFS")
        info_text.append("=" * 25)
        info_text.append("")
        
        # V√©rtice atual
        if self.current_vertex:
            info_text.append(f"üéØ Processando: {self.current_vertex}")
            if self.current_vertex in self.levels:
                info_text.append(f"   N√≠vel: {self.levels[self.current_vertex]}")
        info_text.append("")
        
        # Fila atual
        if self.queue:
            queue_str = " ‚Üê ".join(list(self.queue))
            info_text.append("üì• FILA (pr√≥ximos):")
            info_text.append(f"   {queue_str}")
        else:
            info_text.append("üì• FILA: Vazia")
        info_text.append("")
        
        # Visitados por n√≠vel
        if self.levels:
            info_text.append("üìä N√çVEIS DA √ÅRVORE:")
            max_level = max(self.levels.values()) if self.levels else 0
            for level in range(max_level + 1):
                vertices_at_level = [v for v, l in self.levels.items() if l == level and v in self.visited]
                if vertices_at_level:
                    info_text.append(f"   N√≠vel {level}: {', '.join(sorted(vertices_at_level))}")
        
        info_text.append("")
        
        # Caminho
        if self.path:
            path_str = " ‚Üí ".join(self.path)
            info_text.append("üìã ORDEM DE VISITA:")
            info_text.append(f"   {path_str}")
        
        text_content = "\n".join(info_text)
        self.ax2.text(0.05, 0.95, text_content, transform=self.ax2.transAxes, fontsize=10,
                     verticalalignment='top', fontfamily='monospace',
                     bbox=dict(boxstyle='round,pad=0.5', facecolor='lightyellow', alpha=0.8))
        
        # SUBPLOT 3: √Årvore BFS
        self.draw_bfs_tree()
        
        plt.tight_layout()
        plt.draw()
        plt.pause(0.1)  # Pequena pausa para renderiza√ß√£o
    
    def draw_bfs_tree(self):
        """Desenha a √°rvore BFS no subplot 3"""
        self.ax3.clear()
        self.ax3.set_title("√ÅRVORE BFS", fontsize=12, fontweight='bold', color='green')
        self.ax3.axis('off')
        
        if not self.tree_edges:
            # Se n√£o h√° √°rvore ainda, mostra mensagem
            self.ax3.text(0.5, 0.5, "√Årvore ser√°\nconstru√≠da\nconforme BFS\nprogredir", 
                         transform=self.ax3.transAxes, fontsize=12, ha='center', va='center',
                         bbox=dict(boxstyle='round,pad=0.5', facecolor='lightgreen', alpha=0.5))
            return
        
        # Cria um grafo da √°rvore BFS apenas com n√≥s visitados
        tree_graph = nx.Graph()
        
        # Adiciona apenas arestas que conectam n√≥s j√° visitados
        for edge in self.tree_edges:
            if edge[0] in self.visited and edge[1] in self.visited:
                tree_graph.add_edge(edge[0], edge[1])
        
        # Adiciona n√≥s visitados que podem estar isolados
        for vertex in self.visited:
            tree_graph.add_node(vertex)
        
        if len(tree_graph.nodes()) == 0:
            return
        
        # Calcula posi√ß√µes hier√°rquicas para a √°rvore
        tree_pos = self.calculate_tree_positions()
        
        # Filtra posi√ß√µes apenas para n√≥s que existem no grafo
        filtered_tree_pos = {node: pos for node, pos in tree_pos.items() if node in tree_graph.nodes()}
        
        # Desenha as arestas da √°rvore
        if len(tree_graph.edges()) > 0 and len(filtered_tree_pos) > 1:
            nx.draw_networkx_edges(tree_graph, filtered_tree_pos, edge_color='green', 
                                 width=2, ax=self.ax3)
        
        # Define cores dos n√≥s na √°rvore
        tree_node_colors = []
        for vertex in tree_graph.nodes():
            if vertex == self.current_vertex:
                tree_node_colors.append('red')
            elif vertex in self.visited:
                tree_node_colors.append('lightgreen')
            else:
                tree_node_colors.append('orange')
        
        # Desenha os n√≥s da √°rvore
        if len(filtered_tree_pos) > 0:
            nx.draw_networkx_nodes(tree_graph, filtered_tree_pos, node_color=tree_node_colors, 
                                  node_size=800, alpha=0.9, ax=self.ax3)
            
            # Adiciona labels
            nx.draw_networkx_labels(tree_graph, filtered_tree_pos, font_size=12, font_weight='bold', ax=self.ax3)
        
        # Adiciona informa√ß√µes sobre os n√≠veis
        if self.levels:
            visited_levels = {v: l for v, l in self.levels.items() if v in self.visited}
            if visited_levels:
                max_level = max(visited_levels.values())
                level_info = f"Profundidade: {max_level}\nN√≥s: {len(self.visited)}"
                self.ax3.text(0.02, 0.98, level_info, transform=self.ax3.transAxes, fontsize=10,
                             verticalalignment='top',
                             bbox=dict(boxstyle='round,pad=0.3', facecolor='lightgreen', alpha=0.7))
    
    def calculate_tree_positions(self):
        """Calcula posi√ß√µes hier√°rquicas para desenhar a √°rvore"""
        if not self.levels:
            return {}
        
        # Organiza v√©rtices por n√≠vel
        levels_dict = {}
        for vertex, level in self.levels.items():
            if vertex in self.visited:  # S√≥ mostra v√©rtices j√° visitados
                if level not in levels_dict:
                    levels_dict[level] = []
                levels_dict[level].append(vertex)
        
        # Calcula posi√ß√µes
        tree_pos = {}
        max_level = max(levels_dict.keys()) if levels_dict else 0
        
        for level, vertices in levels_dict.items():
            y = max_level - level  # N√≠vel 0 no topo
            vertices.sort()  # Ordena para consist√™ncia
            
            if len(vertices) == 1:
                x = 0
                tree_pos[vertices[0]] = (x, y)
            else:
                # Distribui horizontalmente
                width = len(vertices) - 1
                for i, vertex in enumerate(vertices):
                    x = (i - width/2) * 1.5  # Espa√ßamento horizontal
                    tree_pos[vertex] = (x, y)
        
        return tree_pos
    
    def create_final_visualization(self, path):
        """Cria a visualiza√ß√£o final do BFS com √°rvore completa"""
        # Limpa o conte√∫do anterior
        self.ax1.clear()
        self.ax2.clear()
        self.ax3.clear()
        
        # SUBPLOT 1: Grafo original com √°rvore BFS
        G = nx.Graph()
        for vertex, neighbors in self.graph.items():
            for neighbor in neighbors:
                G.add_edge(vertex, neighbor)
        
        # Desenha todas as arestas em cinza claro
        nx.draw_networkx_edges(G, self.pos, edge_color='lightgray', width=1, alpha=0.3, ax=self.ax1)
        
        # Desenha a √°rvore BFS em verde
        if self.tree_edges:
            tree_graph = nx.Graph()
            tree_graph.add_edges_from(self.tree_edges)
            nx.draw_networkx_edges(tree_graph, self.pos, edge_color='green', 
                                 width=4, ax=self.ax1)
        
        # Desenha os v√©rtices - todos visitados em verde
        nx.draw_networkx_nodes(G, self.pos, node_color='lightgreen', 
                              node_size=1500, alpha=0.9, ax=self.ax1)
        
        # Labels dos v√©rtices
        nx.draw_networkx_labels(G, self.pos, font_size=16, font_weight='bold', ax=self.ax1)
        
        self.ax1.set_title(f"GRAFO COM √ÅRVORE BFS\nOrdem: {' ‚Üí '.join(path)}", 
                          fontsize=14, fontweight='bold', color='darkgreen')
        self.ax1.axis('off')
        
        # SUBPLOT 2: Resumo do algoritmo
        self.ax2.axis('off')
        
        summary_text = []
        summary_text.append("üìä RESUMO DO ALGORITMO BFS")
        summary_text.append("=" * 30)
        summary_text.append("")
        summary_text.append("üéØ OBJETIVO:")
        summary_text.append("   Explorar o grafo em largura,")
        summary_text.append("   construindo uma √°rvore de busca")
        summary_text.append("")
        summary_text.append("üå≥ √ÅRVORE BFS:")
        summary_text.append(f"   ‚Ä¢ {len(self.tree_edges)} arestas da √°rvore")
        if self.levels:
            max_level = max(self.levels.values())
            summary_text.append(f"   ‚Ä¢ Profundidade: {max_level}")
            summary_text.append("")
            summary_text.append("üìä N√çVEIS:")
            for level in range(max_level + 1):
                vertices_at_level = [v for v, l in self.levels.items() if l == level]
                if vertices_at_level:
                    summary_text.append(f"   N√≠vel {level}: {', '.join(sorted(vertices_at_level))}")
        
        summary_text.append("")
        summary_text.append("üèÜ RESULTADO:")
        summary_text.append(f"   ‚Ä¢ {len(path)} v√©rtices visitados")
        summary_text.append(f"   ‚Ä¢ Ordem: {' ‚Üí '.join(path)}")
        summary_text.append("")
        summary_text.append("üí° CARACTER√çSTICAS:")
        summary_text.append("   ‚Ä¢ Visita por n√≠veis")
        summary_text.append("   ‚Ä¢ Menor dist√¢ncia da raiz")
        summary_text.append("   ‚Ä¢ Estrutura hier√°rquica")
        
        text_content = "\n".join(summary_text)
        self.ax2.text(0.05, 0.95, text_content, transform=self.ax2.transAxes, fontsize=10,
                     verticalalignment='top', fontfamily='monospace',
                     bbox=dict(boxstyle='round,pad=0.5', facecolor='lightblue', alpha=0.8))
        
        # SUBPLOT 3: √Årvore BFS final
        self.ax3.clear()
        self.ax3.set_title("√ÅRVORE BFS COMPLETA", fontsize=14, fontweight='bold', color='darkgreen')
        self.ax3.axis('off')
        
        # Desenha a √°rvore completa
        if self.tree_edges:
            tree_graph = nx.Graph()
            tree_graph.add_edges_from(self.tree_edges)
            
            # Adiciona todos os v√©rtices visitados
            for vertex in self.visited:
                tree_graph.add_node(vertex)
            
            # Calcula posi√ß√µes hier√°rquicas
            tree_pos = self.calculate_tree_positions()
            
            # Desenha arestas da √°rvore
            nx.draw_networkx_edges(tree_graph, tree_pos, edge_color='darkgreen', 
                                 width=3, ax=self.ax3)
            
            # Desenha n√≥s da √°rvore
            nx.draw_networkx_nodes(tree_graph, tree_pos, node_color='lightgreen', 
                                  node_size=1000, alpha=0.9, ax=self.ax3)
            
            # Labels
            nx.draw_networkx_labels(tree_graph, tree_pos, font_size=14, font_weight='bold', ax=self.ax3)
            
            # Adiciona informa√ß√£o sobre a raiz
            root = path[0] if path else 'A'
            self.ax3.text(0.5, 0.02, f"Raiz: {root}", transform=self.ax3.transAxes, 
                         fontsize=12, ha='center', fontweight='bold',
                         bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7))
        
        plt.tight_layout()
        plt.draw()
        plt.pause(0.1)
        
        # Mant√©m a janela aberta
        print("üéØ Pressione Enter para finalizar...")
        input()
        plt.ioff()  # Desliga modo interativo
        plt.show()

def main():
    """Fun√ß√£o principal para executar a demonstra√ß√£o"""
    print("üöÄ Iniciando demonstra√ß√£o do Algoritmo BFS")
    print("‚è≥ Aguarde... A visualiza√ß√£o ser√° exibida passo a passo\n")
    
    bfs_demo = BFSVisualization()
    
    # Executa o algoritmo
    path = bfs_demo.bfs_algorithm(start_vertex='A')
    
    # Visualiza√ß√£o final
    print(f"\nüìä Criando visualiza√ß√£o final...")
    bfs_demo.create_final_visualization(path)
    
    print(f"\n‚ú® Demonstra√ß√£o conclu√≠da!")
    print(f"üìà O BFS explorou o grafo em largura, visitando todos os v√©rtices")
    print(f"   em ordem de dist√¢ncia crescente do v√©rtice inicial.")

if __name__ == "__main__":
    main()